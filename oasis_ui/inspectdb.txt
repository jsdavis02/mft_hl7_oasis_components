# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class OasisAppsetting(models.Model):
    name = models.TextField()
    value = models.TextField()
    env = models.CharField(max_length=25)

    class Meta:
        managed = False
        db_table = 'OASIS_appsetting'


class Userendpoint(models.Model):
    createdat = models.TextField(db_column='createdAt')  # Field name made lowercase. This field type is a guess.
    updatedat = models.TextField(db_column='updatedAt')  # Field name made lowercase. This field type is a guess.
    endpointid = models.OneToOneField('Endpoints', models.DO_NOTHING, db_column='endpointId', primary_key=True)  # Field name made lowercase.
    userid = models.ForeignKey('Users', models.DO_NOTHING, db_column='userId')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'UserEndpoint'
        unique_together = (('endpointid', 'userid'),)


class AppSettings(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.TextField()
    value = models.TextField(blank=True, null=True)
    env = models.CharField(max_length=25)

    class Meta:
        managed = False
        db_table = 'app_settings'


class Audit(models.Model):
    id = models.BigAutoField(primary_key=True)
    processstate = models.CharField(db_column='ProcessState', max_length=50)  # Field name made lowercase.
    messageguid = models.BigIntegerField(db_column='MessageGUID')  # Field name made lowercase.
    messagecontrolid = models.TextField(db_column='MessageControlID', blank=True, null=True)  # Field name made lowercase.
    datetimeofmessage = models.DateTimeField(db_column='DateTimeofMessage', blank=True, null=True)  # Field name made lowercase.
    created_at = models.DateTimeField(blank=True, null=True)
    modified_at = models.DateTimeField(blank=True, null=True)
    proc_time = models.DateTimeField(blank=True, null=True)
    messagepayload = models.TextField(db_column='MessagePayload', blank=True, null=True)  # Field name made lowercase.
    producer_ident = models.CharField(max_length=50, blank=True, null=True)
    consumer_ident = models.CharField(max_length=50, blank=True, null=True)
    route_id = models.BigIntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    producer_id = models.BigIntegerField(blank=True, null=True)
    consumer_id = models.BigIntegerField(blank=True, null=True)
    type = models.CharField(max_length=25, blank=True, null=True)
    messagereference = models.TextField(db_column='MessageReference', blank=True, null=True)  # Field name made lowercase.
    data_format = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'audit'


class AuditProps(models.Model):
    audit_id = models.BigIntegerField(blank=True, null=True)
    name = models.TextField()
    value = models.TextField(blank=True, null=True)
    id = models.BigAutoField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'audit_props'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class CodeTable(models.Model):
    id = models.BigAutoField(primary_key=True)
    input = models.CharField(max_length=100, blank=True, null=True)
    output = models.CharField(max_length=100, blank=True, null=True)
    env = models.CharField(max_length=25, blank=True, null=True)
    lookup_key = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'code_table'
        unique_together = (('input', 'env', 'lookup_key'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class EndpointProps(models.Model):
    id = models.BigAutoField(primary_key=True)
    endpoint = models.ForeignKey('Endpoints', models.DO_NOTHING)
    name = models.CharField(max_length=75)
    value = models.TextField(blank=True, null=True)
    env = models.CharField(max_length=25)

    class Meta:
        managed = False
        db_table = 'endpoint_props'


class EndpointStatus(models.Model):
    id = models.BigAutoField(primary_key=True)
    endpoint_id = models.BigIntegerField()
    app_state = models.CharField(max_length=75)
    action = models.CharField(max_length=75, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'endpoint_status'


class Endpoints(models.Model):
    id = models.BigAutoField(primary_key=True)
    organization = models.CharField(max_length=100)
    software = models.CharField(max_length=50, blank=True, null=True)
    doclink = models.TextField(blank=True, null=True)
    subsystem = models.TextField(blank=True, null=True)
    active = models.BooleanField()
    alert_level = models.IntegerField()
    description = models.TextField(blank=True, null=True)  # This field type is a guess.
    direction = models.CharField(max_length=25, blank=True, null=True)
    bw_process_ident = models.CharField(max_length=75, blank=True, null=True)
    receiving_app = models.CharField(max_length=25, blank=True, null=True)
    receiving_facility = models.CharField(max_length=25, blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=25)
    portmon_host = models.CharField(max_length=25, blank=True, null=True)
    portmon_time = models.DateTimeField(blank=True, null=True)
    bw_app_ident = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'endpoints'


class IntRequestProps(models.Model):
    id = models.BigAutoField(primary_key=True)
    int_request = models.ForeignKey('IntRequests', models.DO_NOTHING)
    name = models.CharField(max_length=255)
    value = models.CharField(max_length=255, blank=True, null=True)
    env = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'int_request_props'


class IntRequests(models.Model):
    id = models.BigAutoField(primary_key=True)
    contact_name = models.CharField(max_length=255)
    contact_email = models.CharField(max_length=255)
    contact_phone = models.CharField(max_length=255, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    producer_description = models.CharField(max_length=255, blank=True, null=True)
    consumer_description = models.CharField(max_length=255, blank=True, null=True)
    producer_type = models.CharField(max_length=255)
    consumer_type = models.CharField(max_length=255)
    data_transfer_req = models.CharField(max_length=255, blank=True, null=True)
    data_manipulation_req = models.CharField(max_length=255, blank=True, null=True)
    doclink = models.CharField(max_length=255, blank=True, null=True)
    createdat = models.TextField(db_column='createdAt')  # Field name made lowercase. This field type is a guess.
    updatedat = models.TextField(db_column='updatedAt')  # Field name made lowercase. This field type is a guess.
    status = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'int_requests'


class MftSchedule(models.Model):
    endpoint_id = models.IntegerField()
    name = models.TextField()
    active = models.BooleanField()
    freq_type = models.CharField(max_length=100)
    freq_interval = models.IntegerField(blank=True, null=True)
    spec_date = models.DateField(blank=True, null=True)
    spec_time = models.TimeField(blank=True, null=True)
    last_run = models.DateTimeField()
    id = models.BigAutoField(primary_key=True)
    sub_day_freq_type = models.CharField(max_length=100, blank=True, null=True)
    sub_day_freq_interval = models.IntegerField(blank=True, null=True)
    sub_day_stop_schedule = models.BooleanField(blank=True, null=True)
    sub_day_start_time = models.TimeField(blank=True, null=True)
    sub_day_end_time = models.TimeField(blank=True, null=True)
    last_files_found = models.DateTimeField(blank=True, null=True)
    sub_day_last_run = models.DateField(blank=True, null=True)
    pause_start = models.DateTimeField(blank=True, null=True)
    pause_end = models.DateTimeField(blank=True, null=True)
    sub_freq_interval = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mft_schedule'


class RouteCriterias(models.Model):
    id = models.BigAutoField(primary_key=True)
    field = models.TextField()
    value = models.CharField(max_length=50)
    operator = models.CharField(max_length=50)
    route = models.ForeignKey('Routes', models.DO_NOTHING)
    group_key = models.CharField(max_length=50, blank=True, null=True)
    group_operator = models.CharField(max_length=10, blank=True, null=True)
    method = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'route_criterias'


class RouteProps(models.Model):
    id = models.BigAutoField(primary_key=True)
    route = models.ForeignKey('Routes', models.DO_NOTHING)
    name = models.CharField(max_length=50)
    value = models.TextField(blank=True, null=True)
    env = models.CharField(max_length=25)

    class Meta:
        managed = False
        db_table = 'route_props'


class Routes(models.Model):
    id = models.BigAutoField(primary_key=True)
    producer_id = models.BigIntegerField()
    consumer_id = models.BigIntegerField()
    producer_messagetypemessagecode = models.CharField(max_length=50)
    producer_messagetypetriggerevent = models.CharField(max_length=50)
    consumer_messagetypemessagecode = models.CharField(max_length=50)
    consumer_messagetypetriggerevent = models.CharField(max_length=50)
    hascriteria = models.BooleanField(db_column='hasCriteria')  # Field name made lowercase.
    active = models.BooleanField()
    hassplit = models.BooleanField(db_column='hasSplit')  # Field name made lowercase.
    hastranslation = models.BooleanField(db_column='hasTranslation')  # Field name made lowercase.
    type = models.CharField(max_length=25)
    name = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'routes'


class SchedulerLock(models.Model):
    last_run = models.DateTimeField(blank=True, null=True)
    type = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'scheduler_lock'


class TxFunctions(models.Model):
    id = models.AutoField(unique=True)
    function_name = models.CharField(unique=True, max_length=50, blank=True, null=True)
    description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tx_functions'


class Users(models.Model):
    username = models.CharField(unique=True, max_length=255)
    email = models.CharField(unique=True, max_length=255)
    password = models.CharField(max_length=255)
    createdat = models.TextField(db_column='createdAt')  # Field name made lowercase. This field type is a guess.
    updatedat = models.TextField(db_column='updatedAt')  # Field name made lowercase. This field type is a guess.
    role = models.CharField(max_length=25, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users'
